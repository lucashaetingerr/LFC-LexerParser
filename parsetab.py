
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'api_map_definitionAPI CABECALHO CAMPO COLON COM COMMA CONVERTER DE DOT EM FORMATO FUNCAO IDENTIFIER LBRACE LPAREN MAPA_API METODO OPERATOR_ASSIGN OPERATOR_EQ PARA PARAMETRO RBRACE RECURSO RPAREN SEMICOLON STRING TRANSFORMAR VALORapi_map_definition : MAPA_API LBRACE optional_declarations RBRACEoptional_declarations : declarations\n                             | empty_ruledeclarations : declarations declaration\n                    | declarationdeclaration : api_declaration\n                   | resource_definition\n                   | header_definition\n                   | function_definitionapi_declaration : API IDENTIFIER COLON STRING SEMICOLONresource_definition : RECURSO STRING DE IDENTIFIER PARA STRING EM IDENTIFIER LBRACE optional_resource_body RBRACEoptional_resource_body : resource_body\n                               | empty_ruleresource_body : resource_body resource_statement\n                     | resource_statementresource_statement : method_definition\n                          | parameter_definition\n                          | field_definition\n                          | transformation_definitionmethod_definition : METODO IDENTIFIER PARA IDENTIFIER SEMICOLONparameter_definition : PARAMETRO STRING DE IDENTIFIER PARA STRING EM IDENTIFIER optional_parameter_converter SEMICOLON\n                            | PARAMETRO STRING DE IDENTIFIER optional_parameter_converter SEMICOLONoptional_parameter_converter : LBRACE CONVERTER COM STRING SEMICOLON RBRACE\n                                    | empty_rulefield_definition : CAMPO STRING DE IDENTIFIER PARA STRING EM IDENTIFIER optional_format optional_converter SEMICOLONoptional_format : FORMATO STRING\n                       | empty_ruleoptional_converter : LBRACE CONVERTER COM STRING SEMICOLON RBRACE\n                          | empty_ruletransformation_definition : TRANSFORMAR VALOR source_condition PARA target_assignment SEMICOLONfield_path_segments : IDENTIFIER\n                           | field_path_segments DOT IDENTIFIERsource_condition : IDENTIFIER DOT field_path_segments OPERATOR_EQ STRINGtarget_assignment : IDENTIFIER DOT field_path_segments OPERATOR_ASSIGN STRINGheader_definition : CABECALHO STRING DE IDENTIFIER PARA STRING EM IDENTIFIER SEMICOLON\n                         | CABECALHO STRING COM STRING SEMICOLONfunction_param_identifier : IDENTIFIER\n                                 | VALORfunction_param_list : function_param_list COMMA function_param_identifier\n                           | function_param_identifieroptional_function_params : function_param_list\n                                | empty_rulefunction_definition : FUNCAO IDENTIFIER LPAREN optional_function_params RPAREN LBRACE function_body_placeholder RBRACEfunction_body_placeholder : empty_ruleempty_rule :'
    
_lr_action_items = {'MAPA_API':([0,],[2,]),'$end':([1,16,],[0,-1,]),'LBRACE':([2,41,51,80,108,110,114,116,123,],[3,45,54,87,87,-45,121,-27,-26,]),'RBRACE':([3,4,5,6,7,8,9,10,11,17,37,40,45,49,50,53,54,55,56,57,58,59,60,61,62,63,68,69,84,95,98,113,118,124,128,],[-45,16,-2,-3,-5,-6,-7,-8,-9,-4,-10,-36,-45,53,-44,-43,-45,-35,68,-12,-13,-15,-16,-17,-18,-19,-11,-14,-20,-22,-30,119,-21,-25,129,]),'API':([3,5,7,8,9,10,11,17,37,40,53,55,68,],[12,12,-5,-6,-7,-8,-9,-4,-10,-36,-43,-35,-11,]),'RECURSO':([3,5,7,8,9,10,11,17,37,40,53,55,68,],[13,13,-5,-6,-7,-8,-9,-4,-10,-36,-43,-35,-11,]),'CABECALHO':([3,5,7,8,9,10,11,17,37,40,53,55,68,],[14,14,-5,-6,-7,-8,-9,-4,-10,-36,-43,-35,-11,]),'FUNCAO':([3,5,7,8,9,10,11,17,37,40,53,55,68,],[15,15,-5,-6,-7,-8,-9,-4,-10,-36,-43,-35,-11,]),'IDENTIFIER':([12,15,23,24,26,42,47,48,64,73,74,75,76,82,83,99,100,102,104,],[18,21,28,29,31,31,51,52,70,78,79,80,81,91,92,92,106,108,110,]),'STRING':([13,14,22,25,38,39,65,66,85,89,101,103,111,115,126,],[19,20,27,30,43,44,71,72,94,97,107,109,117,123,127,]),'COLON':([18,],[22,]),'DE':([19,20,71,72,],[23,24,75,76,]),'COM':([20,96,125,],[25,103,126,]),'LPAREN':([21,],[26,]),'RPAREN':([26,31,32,33,34,35,36,46,],[-45,-37,41,-41,-42,-40,-38,-39,]),'VALOR':([26,42,67,],[36,36,73,]),'SEMICOLON':([27,30,52,79,80,86,88,90,108,109,110,112,114,116,117,119,120,122,123,127,129,],[37,40,55,84,-45,95,-24,98,-45,113,-45,118,-45,-27,-34,-23,124,-29,-26,128,-28,]),'PARA':([28,29,70,77,80,81,107,],[38,39,74,82,85,89,-33,]),'COMMA':([31,33,35,36,46,],[-37,42,-40,-38,-39,]),'EM':([43,44,94,97,],[47,48,102,104,]),'METODO':([54,57,59,60,61,62,63,69,84,95,98,118,124,],[64,64,-15,-16,-17,-18,-19,-14,-20,-22,-30,-21,-25,]),'PARAMETRO':([54,57,59,60,61,62,63,69,84,95,98,118,124,],[65,65,-15,-16,-17,-18,-19,-14,-20,-22,-30,-21,-25,]),'CAMPO':([54,57,59,60,61,62,63,69,84,95,98,118,124,],[66,66,-15,-16,-17,-18,-19,-14,-20,-22,-30,-21,-25,]),'TRANSFORMAR':([54,57,59,60,61,62,63,69,84,95,98,118,124,],[67,67,-15,-16,-17,-18,-19,-14,-20,-22,-30,-21,-25,]),'DOT':([78,91,92,93,105,106,],[83,99,-31,100,100,-32,]),'CONVERTER':([87,121,],[96,125,]),'OPERATOR_EQ':([92,93,106,],[-31,101,-32,]),'OPERATOR_ASSIGN':([92,105,106,],[-31,111,-32,]),'FORMATO':([110,],[115,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'api_map_definition':([0,],[1,]),'optional_declarations':([3,],[4,]),'declarations':([3,],[5,]),'empty_rule':([3,26,45,54,80,108,110,114,],[6,34,50,58,88,88,116,122,]),'declaration':([3,5,],[7,17,]),'api_declaration':([3,5,],[8,8,]),'resource_definition':([3,5,],[9,9,]),'header_definition':([3,5,],[10,10,]),'function_definition':([3,5,],[11,11,]),'optional_function_params':([26,],[32,]),'function_param_list':([26,],[33,]),'function_param_identifier':([26,42,],[35,46,]),'function_body_placeholder':([45,],[49,]),'optional_resource_body':([54,],[56,]),'resource_body':([54,],[57,]),'resource_statement':([54,57,],[59,69,]),'method_definition':([54,57,],[60,60,]),'parameter_definition':([54,57,],[61,61,]),'field_definition':([54,57,],[62,62,]),'transformation_definition':([54,57,],[63,63,]),'source_condition':([73,],[77,]),'optional_parameter_converter':([80,108,],[86,112,]),'target_assignment':([82,],[90,]),'field_path_segments':([83,99,],[93,105,]),'optional_format':([110,],[114,]),'optional_converter':([114,],[120,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> api_map_definition","S'",1,None,None,None),
  ('api_map_definition -> MAPA_API LBRACE optional_declarations RBRACE','api_map_definition',4,'p_api_map_definition','parser.py',37),
  ('optional_declarations -> declarations','optional_declarations',1,'p_optional_declarations','parser.py',44),
  ('optional_declarations -> empty_rule','optional_declarations',1,'p_optional_declarations','parser.py',45),
  ('declarations -> declarations declaration','declarations',2,'p_declarations','parser.py',49),
  ('declarations -> declaration','declarations',1,'p_declarations','parser.py',50),
  ('declaration -> api_declaration','declaration',1,'p_declaration','parser.py',61),
  ('declaration -> resource_definition','declaration',1,'p_declaration','parser.py',62),
  ('declaration -> header_definition','declaration',1,'p_declaration','parser.py',63),
  ('declaration -> function_definition','declaration',1,'p_declaration','parser.py',64),
  ('api_declaration -> API IDENTIFIER COLON STRING SEMICOLON','api_declaration',5,'p_api_declaration','parser.py',70),
  ('resource_definition -> RECURSO STRING DE IDENTIFIER PARA STRING EM IDENTIFIER LBRACE optional_resource_body RBRACE','resource_definition',11,'p_resource_definition','parser.py',75),
  ('optional_resource_body -> resource_body','optional_resource_body',1,'p_optional_resource_body','parser.py',89),
  ('optional_resource_body -> empty_rule','optional_resource_body',1,'p_optional_resource_body','parser.py',90),
  ('resource_body -> resource_body resource_statement','resource_body',2,'p_resource_body','parser.py',94),
  ('resource_body -> resource_statement','resource_body',1,'p_resource_body','parser.py',95),
  ('resource_statement -> method_definition','resource_statement',1,'p_resource_statement','parser.py',106),
  ('resource_statement -> parameter_definition','resource_statement',1,'p_resource_statement','parser.py',107),
  ('resource_statement -> field_definition','resource_statement',1,'p_resource_statement','parser.py',108),
  ('resource_statement -> transformation_definition','resource_statement',1,'p_resource_statement','parser.py',109),
  ('method_definition -> METODO IDENTIFIER PARA IDENTIFIER SEMICOLON','method_definition',5,'p_method_definition','parser.py',115),
  ('parameter_definition -> PARAMETRO STRING DE IDENTIFIER PARA STRING EM IDENTIFIER optional_parameter_converter SEMICOLON','parameter_definition',10,'p_parameter_definition','parser.py',121),
  ('parameter_definition -> PARAMETRO STRING DE IDENTIFIER optional_parameter_converter SEMICOLON','parameter_definition',6,'p_parameter_definition','parser.py',122),
  ('optional_parameter_converter -> LBRACE CONVERTER COM STRING SEMICOLON RBRACE','optional_parameter_converter',6,'p_optional_parameter_converter','parser.py',144),
  ('optional_parameter_converter -> empty_rule','optional_parameter_converter',1,'p_optional_parameter_converter','parser.py',145),
  ('field_definition -> CAMPO STRING DE IDENTIFIER PARA STRING EM IDENTIFIER optional_format optional_converter SEMICOLON','field_definition',11,'p_field_definition','parser.py',153),
  ('optional_format -> FORMATO STRING','optional_format',2,'p_optional_format','parser.py',170),
  ('optional_format -> empty_rule','optional_format',1,'p_optional_format','parser.py',171),
  ('optional_converter -> LBRACE CONVERTER COM STRING SEMICOLON RBRACE','optional_converter',6,'p_optional_converter','parser.py',180),
  ('optional_converter -> empty_rule','optional_converter',1,'p_optional_converter','parser.py',181),
  ('transformation_definition -> TRANSFORMAR VALOR source_condition PARA target_assignment SEMICOLON','transformation_definition',6,'p_transformation_definition','parser.py',189),
  ('field_path_segments -> IDENTIFIER','field_path_segments',1,'p_field_path_segments','parser.py',200),
  ('field_path_segments -> field_path_segments DOT IDENTIFIER','field_path_segments',3,'p_field_path_segments','parser.py',201),
  ('source_condition -> IDENTIFIER DOT field_path_segments OPERATOR_EQ STRING','source_condition',5,'p_source_condition','parser.py',210),
  ('target_assignment -> IDENTIFIER DOT field_path_segments OPERATOR_ASSIGN STRING','target_assignment',5,'p_target_assignment','parser.py',216),
  ('header_definition -> CABECALHO STRING DE IDENTIFIER PARA STRING EM IDENTIFIER SEMICOLON','header_definition',9,'p_header_definition','parser.py',222),
  ('header_definition -> CABECALHO STRING COM STRING SEMICOLON','header_definition',5,'p_header_definition','parser.py',223),
  ('function_param_identifier -> IDENTIFIER','function_param_identifier',1,'p_function_param_identifier','parser.py',242),
  ('function_param_identifier -> VALOR','function_param_identifier',1,'p_function_param_identifier','parser.py',243),
  ('function_param_list -> function_param_list COMMA function_param_identifier','function_param_list',3,'p_function_param_list','parser.py',249),
  ('function_param_list -> function_param_identifier','function_param_list',1,'p_function_param_list','parser.py',250),
  ('optional_function_params -> function_param_list','optional_function_params',1,'p_optional_function_params','parser.py',259),
  ('optional_function_params -> empty_rule','optional_function_params',1,'p_optional_function_params','parser.py',260),
  ('function_definition -> FUNCAO IDENTIFIER LPAREN optional_function_params RPAREN LBRACE function_body_placeholder RBRACE','function_definition',8,'p_function_definition','parser.py',266),
  ('function_body_placeholder -> empty_rule','function_body_placeholder',1,'p_function_body_placeholder','parser.py',278),
  ('empty_rule -> <empty>','empty_rule',0,'p_empty_rule','parser.py',284),
]
